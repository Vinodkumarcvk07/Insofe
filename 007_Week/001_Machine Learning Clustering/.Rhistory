cereals = read.csv("/Users/suresh/Desktop/Insofe/007_Week/001_Machine Learning Clustering/Cereals.csv",header=T)
str(cereals)
table(cereals$shelf)
#cereals$shelf = as.factor(cereals$shelf)
apply(cereals,2,FUN=function(x){sum(is.na(x))})
library(DMwR)
cereals = knnImputation(cereals,5)
library(vegan)
cereals[,sapply(cereals,is.numeric)] = decostand(cereals[,sapply(cereals,is.numeric)],'standardize')
fit<-kmeans(cereals[,sapply(cereals,is.numeric)],centers=5)
summary(fit)
fit$withinss
fit$centers
fit$cluster
wss <- 0
for (i in 1:15)
{
set.seed(1234)
wss[i] <- sum(kmeans(cereals[,sapply(cereals,is.numeric)],centers=i)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Total within-cluster sum of squares")
set.seed(1234)
fit <- kmeans(cereals[,sapply(cereals,is.numeric)], centers = 6)
fit$withinss
sum(fit$withinss)
fit$cluster
cereals$Cluster = fit$cluster
table(cereals$Cluster)
cereals
cerals[,c('name','Cluster')]
cereals[,c('name','Cluster')]
cereals[order(Cluster),c('name','Cluster')]
librry(stats)
library(stats)
cereals[order(Cluster),c('name','Cluster')]
cereals[order(cereals$Cluster),c('name','Cluster')]
plot(fit)
require(mtcars)
load(mtcars)
remove(list=ls())
data = mtcars
d<-distance(data,method='euclidean')
d<-dist(data,method='euclidean')
d
distances = as.matrix(d)
distances
fit<-hclust(d,method='single')
fit
plot(fit)
fit<-hclust(d,method='complete')
plot(fit)
fit<-hclust(d,method='average')
plot(fit)
fit<-hclust(d,method='single')
plot(fit)
fit<-hclust(d,method='ward')
fit<-hclust(d,method='ward.D')
plot(fit)
cutree(fit,k=5)
groups <- cutree(fit,k=5)
groups
rect.hclust(fit,k=5,border='red')
rect.hclust(fit,k=4,border='red')
rect.hclust(fit,k=2,border='green')
rect.hclust(fit,k=4,border='blue')
#K-medoids Clustering
library(kernlab)
install.packages("Kernlab")
install.packages("kernlab")
library(kernlab)
specc(x, centers=2)
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)), cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
specclu = specc(x, centers=2)
plot(x, col=specclu)
distances = as.matrix(dist(x))
distances
W = exp(-distances^2)
W
diag(rowSums(W))
G = diag(rowSums(W))
L = G - W
eigen(L)
eig = eigen(L)
kmeans(eig$vectors[,24],
centers=2)
km2 = kmeans(eig$vectors[,24],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
exp(-distances^2)
W
W
G
L = G - W
L
eig = eigen(L)
eig
km2 = kmeans(eig$vectors[,2],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,24],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,25],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,23],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,24],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(15,0,0.5)), cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
specclu = specc(x, centers=2)
plot(x, col=specclu)
x <- rbind(cbind(rnorm(15), rnorm(15,0,0.5)), cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
specclu = specc(x, centers=2)
plot(x, col=specclu)
distances = as.matrix(dist(x))
W = exp(-distances^2)
G = diag(rowSums(W))
L = G - W
eig = eigen(L)
eig
km2 = kmeans(eig$vectors[,29],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,30],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,28],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
km2 = kmeans(eig$vectors[,29],
centers=2)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km2$cluster],
main="spectral clustering")
eig = eigen(L)
x <- rbind(cbind(rnorm(10), rnorm(10,0,0.5)), cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
specclu = specc(x, centers=2)
plot(x, col=specclu)
##Manual Calculation of Spectral clustering
distances = as.matrix(dist(x))
W = exp(-distances^2)
G = diag(rowSums(W))
L = G - W
eig = eigen(L)
eig
library(cluster)
set.seed(123)
data("USArrests")
USArrests
ss <- sample(1:50, 20)
scale(USArrests[ss,])
df <- scale(USArrests[ss,])
res.fanny <- fanny(df, 4)
res.fanny
library(factoextra)
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
install.packages(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
data("USArrests")
USArrests
df <- scale(USArrests)
res.fanny <- fanny(df, 4)
library(factoextra)
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
res.fanny <- fanny(df, 3)
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
res.fanny
res.fanny <- fanny(df, 3,metric='manhattan')
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
fviz_silhouette(res.fanny, label = TRUE)
cmeans(df, centers, iter.max = 100, dist = "euclidean", m = 2)
install.packages("e1071")
cmeans(df, centers, iter.max = 100, dist = "euclidean", m = 2)
library(e1071)
cmeans(df, centers, iter.max = 100, dist = "euclidean", m = 2)
cmeans(df, 4)
res.cmeans = cmeans(df, 4)
fviz_cluster(res.cmeans, frame.type = "norm",
frame.level = 0.68)
fviz_cluster(res.cmeans,frame.level = 0.68)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), frame.type = "norm",frame.level = 0.68)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.68)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.70)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.80)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.60)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.50)
res.cmeans
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "euclid",ellipse.level = 0.50)
fviz_cluster(list(data = df, cluster=res.cmeans$cluster), ellipse.type = "norm",ellipse.level = 0.50)
