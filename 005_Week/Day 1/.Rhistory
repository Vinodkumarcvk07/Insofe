((0.8*1)+(.6*2)+(.2*3))/3
((0.8*1)+(.6*2)+(.2*3))
mean(c(150,165,135,170))
c(8,12,16,20,24,1/8,1/6,3/8,1/4,1/12)
sd(c(8,12,16,20,24,1/8,1/6,3/8,1/4,1/12))
1+2+6+5+2
32*3
8+24+96+120+48
8+24+96+100+48
16^2
library(infotheo)
data<-read.csv("/Users/suresh/Desktop/Insofe/003_Week/Day 2/R data Pre Processing/Data.csv",header=T)
data$Income
data
View(data)
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
IncomeBin
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
IncomeBin <- discretize(data$Income, disc="equalwidth",nbins=4)
table(IncomeBin)
library(dummies)
EduDummyVars<-dummy(data$Education)
head(EduDummyVars)
EduDummyVars
Data<-data.frame(data,EduDummyVars)
Data
qt(0.05)
qt(0.05,df=11)
qt(0.95,df=11)
pt(0.95,df=11)
1-pt(0.95,df=11)
pt(1.795885,df=11)
1-pt(1.795885,df=11)
18/150
18/358
exp(-2.39)
exp(-2.39)*2.39
exp(-2.39)*150
pnorm(80,mean=90,sd=15)
pnorm(80.5,mean=90,sd=15)
pnorm(80,mean=90,sd=15)
pnorm(100,mean=90,sd=15)
pnorm(100,mean=90,sd=15) - pnorm(80,mean=90,sd=15)
-10/15
dnorm(-10/15)
-10/15
qnorm(-10/15)
qnorm(-10/15)
qnorm(-0.6666667)
pnorm(-0.6666667)
rnorm(1000,mean=990,sd=15)
dnorm(rnorm(1000,mean=990,sd=15))
rnorm(1000,mean=90,sd=15)
dnorm(rnorm(1000,mean=90,sd=15))
gen_ran = rnorm(1000,mean=90,sd=15)
dnorm(gen_ran)
gen_ran
pnorm(gen_ran)
dnorm(gen_ran,mean=90,sd=15)
dnorm(50,mean=90,sd=15)
-40/15
pnorm(-40/15)
qnorm(-40/15)
qnorm(-2.666667)
pnorm(-2.666667)
dnorm(-2.666667)
pnorm(-2.666667)
qnorm(-2.666667)
quantile(gen_ran)
pnorm(59.5,mean=30,sd=20)
1-pnorm(59.5,mean=30,sd=20)
29.5/20
qnorm(1.475)
pnorm(1.475)
pnorm(40.5,mean=30,sd=20)
10.5/20
1-pnorm(1.475)
pnorm(0.525)
pbinom(10.5,mean=15/4,sd=sqrt(45/16))
pbinom(10.5,size=15,prob=1/4)
1-pbinom(10.5,size=15,prob=1/4)
1-pbinom(9.5,size=15,prob=1/4)
1-pbinom(10.5,size=15,prob=1/4)
25/sqrt(45)
pnorm(3.72678)
1-pnorm(3.72678)
15/4
1-pbinom(10,size=15,prob=1/4)
1-.28
(.72^7)*(.28)
dgeom(8,.28)
dgeom(7,.28)
pgeom(5,.28)
1-(.72^5)
pgeom(5,.28)
pgeom(4,.28)
exp(-3)*17/2
ppois(2,3)
exp(-3)*(27/8)
dpois(4,3)
exp(-3)*(41/3)
ppois(4,3)
(27/8)+13
exp(-3)*(16.35)
ppois(4,3)
exp(-3)*(16.375)
sqrt(20000)
4/sqrt(20000)
4/sqrt(20000)
quantile(gen_ran)
dnorm(.50,mean=90,sd=15)
qnorm(.50,mean=90,sd=15)
4/sqrt(20000)
pnorm(84.5,mean = 80,0.02828427)
pnorm(84.5,mean = 80,sd=0.02828427)
1-pbinom(10,size=15,prob=1/4)
1-pbinom(9.5,size=15,prob=1/4)
1-pbinom(10,size=15,prob=1/4)
15*(1/4)
qnorm(.0025)
qnorm(.975)
pnorm(84.5,mean = 80,sd=0.02828427)
pnorm(80,mean = 80,sd=0.02828427)
pnorm(84.5,mean = 80,sd=0.02828427)
pexp(2,rate=1/3)
mean=90; sd=15
dnorm(50,90,15)
x <- round(sort(rnorm(1000,mean,sd)),2)
lb=min(x); ub=60
y <- dnorm(sort(x),mean,sd)
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=FALSE)
sm = .84
pm = .90
sqrt((pm*.1)/144)
pnorm(sm,mean = .9,sd = .025)
qnorm(sm,mean = .9,sd = .025)
1-qnorm(sm,mean = .9,sd = .025)
pnorm(sm,mean = .9,sd = .025)
qnorm(0.008197536)
qnorm(pnorm(sm,mean = .9,sd = .025))
polygon(c(lb,x[i],ub), c(0,y[i],0), col="red")
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, y)
lines(x, y)
polygon(c(lb,x[i],ub), c(0,y[i],0), col="red")
area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd) #pnorm gives the cumulative probability upto x
mtext(paste("P(",lb,"< Work Hours <",ub,") =", signif(area, digits=3)),3)
axis(1, at=seq(min(x), max(x), sd), pos=0)
qnorm(0.008197536)
qnorm(0.0025)
qnorm(0.975)
qnorm(0.008197536)
pnorm(-2.4)
2*pnorm(-2.4)
pnorm(2.4)
1-pnorm(2.4)
pnorm(2.4)-pnorm(-2.4)
data_mv<-read.csv("/Users/suresh/Desktop/Insofe/003_Week/Day 2/R data Pre Processing/DataWithMissingValues.csv",header=T)
sum(is.na(data_mv))#To check null values in data
library(DMwR)
centralImputation(data_mv)
data<-read.csv("/Users/suresh/Desktop/Insofe/004_Week/CustomerData.csv",header= T)
customer<-read.csv("/Users/suresh/Desktop/Insofe/004_Week/Day 2/CustomerData.csv",header= T)
names(customer)
str(customer)
rm(list=ls(all=TRUE))
setwd("")
data<-read.csv("/Users/suresh/Desktop/Insofe/003_Week/Day 2/R data Pre Processing/Data.csv",header=T)
str(data)
head(data)
tail(data)
sum(is.na(data))#To check null values in data
names(data)
Data_NumAtr<-subset(data,select=c(Age,Experience,Income,CCAvg,Mortgage))
Data_CatAtr<-subset(data,select=-c(Age,Experience,Income,CCAvg,Mortgage))
Data_CatAtr$ID<-as.factor(Data_CatAtr$ID) # One by one
Data_CatAtr<-data.frame(apply(Data_CatAtr,2,function(x){as.factor(x)}))
str(Data_CatAtr)
Data1<-data[data$Age>50,c("ID","Age")]
Data2<-data[data$Income>70,c("ID","Income")]
length(intersect(Data1$ID,Data2$ID))
intersect(Data1$ID,Data2$ID)
length(intersect(Data1$ID,Data2$ID))
Data1
length(Data1)
length(Data2)
length(intersect(Data1$ID,Data2$ID))
tapply(data$Income,IncomeBin,min)
library(infotheo)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,min)
intersect(Data1$ID,Data2$ID)
data[data$Income>70,c("ID","Income")]
length(data[data$Income>70,c("ID","Income")])
dim(data[data$Income>70,c("ID","Income")])
dim(data[data$Income>50,c("ID","Income")])
intersect(Data1$ID,Data2$ID)
MergedData<-merge(Data1,Data2,by.x="ID",by.y="ID",all.x=TRUE) #left (outer) join
MergedData<-merge(Data1,Data2,by.x="ID",by.y="ID",all.y=TRUE) #right (outer) join
MergedData
library(infotheo)
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
IncomeBin
table(IncomeBin)
tapply(data$Income,min)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
tapply(data$Income,IncomeBin,mean)
summary(data$Age)
data$AgeNew<-0
for (i in 1:nrow(data)){
if (data$Age[i]>=45){
data$AgeNew[i]=2
}
else {
data$AgeNew[i]=1
}
}
table(data$AgeNew)
tapply(data$Age,data$AgeNew,min)
tapply(data$Age,data$AgeNew,max)
library(dummies)
EduDummyVars<-dummy(data$Education)
head(EduDummyVars)
Data<-data.frame(data,EduDummyVars)
Data
Data<-data.frame(data,EduDummyVars)
head(Data)
head(Data,n=2)
head(Data,n=1)
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
IncomeBin <- discretize(data$Income, disc="equalwidth",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,mean)
tapply(data$Income,IncomeBin,max)
table(IncomeBin)
IncomeBin <- discretize(data$Income, disc="equalfreq",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
IncomeBin <- discretize(data$Income, disc="equalwidth",nbins=4)
table(IncomeBin)
tapply(data$Income,IncomeBin,mean)
tapply(data$Income,IncomeBin,min)
tapply(data$Income,IncomeBin,max)
data_mv<-read.csv("/Users/suresh/Desktop/Insofe/003_Week/Day 2/R data Pre Processing/DataWithMissingValues.csv",header=T)
sum(is.na(data_mv))#To check null values in data
summary(data)
data_mv2<-na.omit(data_mv)
data_mv2
library(DMwR)
manyNAs(data_mv, 0.2)
dim(data_mv)
length(manyNAs(data_mv, 0.2) )
manyNAs(data_mv, 0.2)
na.omit(data_mv)
dim(na.omit(data_mv))
manyNAs(data_mv, 0.2)
dim(data_mv)
manyNAs(data_mv, 0)
manyNAs(data_mv, 0.2)
data_mv[42,]
sum(is.na(data_mv))
is.na(data_mv)
manyNAs(data_mv, 0.2)
data_mv[c(4 ,14 ,19 ,22 ,42),]
manyNAs(data_mv, 0)
data_mv[c(4   ,9  ,14  ,17  ,19  ,22  ,42  ,51  ,57  ,71 ,102 ,111 ,141 ,167 ,177 ,208, 261 ,318 ,391 ,421 ,441 ,548),]
data_mv[c(4   ,9  ,14  ,17  ,19  ,22  ,42 ),]
manyNAs(data_mv, 0.2)
data_mv[c(4,14  ,19  ,22  ,42 ),]
qnorm(0.0025)
qnorm(0.975)
qnorm(pnorm(sm,mean = .9,sd = .025))
sm = .84
pm = .90
sqrt((pm*.1)/144)
qnorm(pnorm(sm,mean = .9,sd = .025))
pnorm(sm,mean = .9,sd = .025)
qnorm(pnorm(sm,mean = .9,sd = .025))
pnorm(1.96)
20*0.0001
exp(-0.002)
c(48,66,70)
sum(c(48,66,70))
sum(c(84,46,41))
sum(c(74,60,47))
data <- data.frame(scores = c(643,655,702,469,427,525,484,456,402),method = factor(rep(c("M1","M2","M3"),c(3,3,3))))
data
data <- data.frame(scores = c(3,3,3,4,4,5,3,4,4,5,5,4,4,4,5,5),method = factor(rep(c("1996","1997","1998"),c(5,5,5))))
length(c(3,3,3,4,4,5,3,4,4,5,5,4,4,4,5,5))
data <- data.frame(scores = c(3,3,4,4,5,3,4,4,5,5,4,4,4,5,5),method = factor(rep(c("1996","1997","1998"),c(5,5,5))))
data
model = aov(scores~method,data)
summary(model)
model.tables
model
summary(model)
qf(.95,2,12)
model = aov(scores~method,data)
summary(model)
qf(.95,2,12)
tb<- matrix(c(48,66,70,84,46,41,74,60,47),nrow = 3,ncol = 3,byrow = F)
tb
tb<- matrix(c(48,66,70,84,46,41,74,60,47),nrow = 3,ncol = 3,byrow = T)
tb
chisq.test(tb)
chisq.test(tb)
chi = chisq.test(tb)
summary(chi)
sum(c(48,66,70))
sum(c(84,46,41))
sum(c(74,60,47))
sum(70,41,47)
sum(c(48,66,70))
+sum(c(84,46,41))
+sum(c(74,60,47))
sum(c(48,66,70))+sum(c(84,46,41))+sum(c(74,60,47))
sum(70,41,47)
sum(66,46,60)
sum(48,84,74)
(171*158)/536
(206*184)/536
(181*172)/536
((181*172)/536)+((181*158)/536)
setwd("/Users/suresh/Desktop/Insofe/005_Week/Day 1/Product_Purchase_Info.csv")
setwd("/Users/suresh/Desktop/Insofe/005_Week/Day 1")
product = read.csv("Product_Purchase_Info.csv",header=T)
product
product$Date<-as.factor(product$Date)
str(product)
product$Date<-as.Date(product$Date)
str(product)
product
product
product = read.csv("Product_Purchase_Info.csv",header=T)
product$Date<-as.factor(product$Date)
str(product)
product
product$Date<-as.Date(product$Date,format="%dd-%mm-%YYYY")
str(product)
product
product$Date<-as.Date(product$Date,format="%d-%m-%yyyy")
str(product)
product
product = read.csv("Product_Purchase_Info.csv",header=T)
product$Date<-as.factor(product$Date)
product$Date<-as.Date(product$Date,format="%d-%m-%yyyy")
product
product = read.csv("Product_Purchase_Info.csv",header=T)
product
product$Date<-as.factor(product$Date)
product$Date<-as.Date(product$Date,format="%d-%m-%yyyy")
product
product = read.csv("Product_Purchase_Info.csv",header=T)
product$Date<-as.factor(product$Date)
product$Date<-as.Date(product$Date,format="%d-%m-%y")
product
product = read.csv("Product_Purchase_Info.csv",header=T)
product
product$Date<-as.factor(product$Date)
as.Date(product$Date,"%d-%m-%Y")
product$Date<-as.Date(product$Date,"%d-%m-%Y")
product
str(product)
product = read.csv("Product_Purchase_Info.csv",header=T)
product
product$Date<-as.factor(product$Date)
str(product)
product$Date<-as.Date(product$Date,"%d-%m-%Y")
product
str(product)
month(product$Date)
month(product$Date)
format(product$Date,'%m')
product$Month = format(product$Date,'%m')
product
str(product)
tapply(product$Price,product$Month,sum)
product
product[,c('product','price')]
product[,c('Product','Price')]
aov(Price~Product,data=product[,c('Product','Price')])
model = aov(Price~Product,data=product[,c('Product','Price')])
summary(model)
qf(.95,1,22)
product$Product<-as.factor(product$Product)
price_data = product[,c('Product','Price')]
model = aov(Price~Product,data=price_data)
summary(model)
qf(.95,1,22)
dim(price_data)
model = aov(Price~Product,data=price_data)
summary(model)
qf(.95,2,21)
qf(.99,2,21)
product[,c('Product','Month','Price')]
aggregate = product[,c('Product','Month','Price')]
str(product)
tapply(aggregate$Price,aggregate$Month,sum)
tapply(aggregate$Price,c(aggregate$Month,aggregate$Product),sum)
install.packages("reshape2")
library(reshape2)
melt(aggregate,id.vars=c('Month','Price'))
melt(aggregate,id.vars=c('Month','Product'))
melt(aggregate,id.vars=c('price'))
melt(aggregate,id.vars=c('Price'))
cast(aggregate, Product ~ Price)
melt(aggregate,measure.vars =c('Price'))
melt(aggregate,measure.vars =c('Price'),variable.name = c('Product','Month'))
melt(aggregate,measure.vars =c('Product','Month'),variable.name = 'Price')
melt(aggregate,id = c('Product','Month'))
cast(aggregate, Price ~ Product*Month,mean)
dcast(aggregate, Price ~ Product*Month,mean)
dcast(aggregate, Price ~ Product*Month,sum)
dcast(aggregate, Price ~ Product~Month,sum)
dcast(aggregate, Price ~ Product+Month,sum)
dcast(aggregate, Product ~ Month, value.var = "Price")
dcast(aggregate, Month  ~  Product, value.var = "Price")
library(ggplot2)
install.packages("ggplot2")
tapply(product$Price,product$Month,sum)
ggplot(tapply(product$Price,product$Month,sum))
library(ggplot2)
ggplot(tapply(product$Price,product$Month,sum))
data.frame(tapply(product$Price,product$Month,sum))
data.frame(tapply(product$Price,product$Month,sum),c('Month','TotalRevenue'))
data.frame(tapply(product$Price,product$Month,sum),col.names=c('Month','TotalRevenue'))
revenue[,c('Month','TotalRevenue')] = data.frame(tapply(product$Price,product$Month,sum))
revenue[,c('Month','TotalRevenue')]
revenue = data.frame(tapply(product$Price,product$Month,sum))
revenue
col.names(revenue) = c("Month","TotalRevenue")
column.names(revenue) = c("Month","TotalRevenue")
colnames(revenue) = c("Month","TotalRevenue")
colnames(revenue) = c("Month","TotalRevenue")
colnames(revenue)
c("Month","TotalRevenue")
colnames(revenue)[1]
colnames(revenue)[2]
revenue
revenue[1,]
revenue[c(1,2),]
dim(revenue)
rownames(revenue)
colnames(revenue) = 'TotalRevenue'
revenue
revenue$Month = rownames(revenue)
revenue
ggplot(revenue)
revenue
ggplot(revenue,aes(month,TotalRevenue))
library(ggplot2)
ggplot(revenue,aes(month,TotalRevenue))
ggplot(revenue,aes(Month,TotalRevenue))
ggplot(revenue,aes(Month,TotalRevenue))
revenue$Month<-as.factor(revenue$Month)
ggplot(revenue,aes(Month,TotalRevenue))
str(revenue)
ggplot(revenue,aes(Month,TotalRevenue),colour='red')
geom_point(aes(Month,TotalRevenue))
ggplot(revenue,aes(Month,TotalRevenue),colour='red')+
geom_point(aes(Month,TotalRevenue))
ggplot(revenue,aes(Month,TotalRevenue))+
geom_point(aes(Month,TotalRevenue),colour="red")
ggplot(revenue,aes(Month,TotalRevenue))+
geom_point(aes(Month,TotalRevenue),colour="red")
ggplot(revenue,aes(Month,TotalRevenue))+
geom_point(aes(Month,TotalRevenue),colour="red")+geom_line()
ggplot(revenue,aes(Month,TotalRevenue))+geom_line()
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()+geom_abline()
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()
ggplot(revenue,aes(Month,TotalRevenue))+geom_bar()
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()
apply(product,2,mean)
apply(product$Price,2,mean)
product
tapply(product$Price,product$Month,mean)
mean(product$Price)
sd(product$Price)
apply(product,2,min)
apply(product,2,min)['Price']
as.int(apply(product,2,min)['Price'])
as.numeric(apply(product,2,min)['Price'])
as.numeric(apply(product,2,min)['Price'])-mean(product$Price)
as.numeric(apply(product,2,max)['Price'])-mean(product$Price)
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()
revenue
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()+geom_line()
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()+geom_line()+facet_grid(Month ~ TotalRevenue)
ggplot(revenue,aes(Month,TotalRevenue))+geom_point()+geom_line()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_point()+geom_line()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_point()
ggplot(revenue,aes(x=Month,y=TotalRevenue,color = 'State'))+geom_point()
ggplot(revenue,aes(x=Month,y=TotalRevenue,color = 'Revenue'))+geom_point()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_point()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_line()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_point()
ggplot(revenue,aes(x=Month,y=TotalRevenue))+geom_point()+geom_smooth()
